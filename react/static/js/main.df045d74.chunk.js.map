{"version":3,"sources":["MainPage.js","App.js","serviceWorker.js","index.js"],"names":["endpoint","MainPage","props","onChange","event","setState","target","name","value","onSubmit","task","state","axios","post","headers","then","res","getPOST","console","log","get","data","items","map","item","keyss","color","picture","status","Grid","Column","key","id","divided","Card","fluid","Image","src","wrapped","ui","Content","Header","title","Meta","className","created_at","Description","ReactHtmlParser","content","extra","floated","width","onClick","updatePost","Icon","deletePost","put","delete","this","as","Form","Group","widths","Input","label","placeholder","TextArea","Button","columns","Row","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df045d74.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Card, Header, Form, Icon, Image, Grid ,Divider} from \"semantic-ui-react\";\nimport ReactHtmlParser, { processNodes, convertNodeToElement, htmlparser2 } from 'react-html-parser';\n\nlet endpoint = \"http://kurban.selmantunc.com.tr\";\n\nclass MainPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      task: \"\",\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    this.getPOST();\n  }\n\n  onChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  onSubmit = () => {\n    let { task } = this.state;\n    // console.log(\"pRINTING task\", this.state.task);\n    if (task) {\n      axios\n        .post(\n          endpoint + \"/api/v1/post\", {\n\n            \n          task\n        }, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }\n        }\n        )\n        .then(res => {\n          this.getPOST();\n          this.setState({\n            task: \"\"\n          });\n          console.log(res);\n        });\n    }\n  };\n\n  getPOST = () => {\n    axios.get(endpoint + \"/api/v1/postall\").then(res => {\n      console.log(res);\n      if (res.data) {\n        this.setState({\n          items: res.data.map((item, keyss) => {\n            let color = \"yellow\";\n            console.log(keyss)\n            let picture = \"http://localhost:8888/assets/image.png\";\n\n            if (item.picture) {\n              picture = endpoint + \"/upload/\" + item.picture;\n            }\n\n            if (item.status) {\n              color = \"green\";\n            }\n            if (keyss % 2 == 0) {\n              var rows = 1\n            } else {\n              var rows = 2\n            }\n\n            return (\n          \n\n                  <Grid.Column key={item.id} divided='vertically'>\n                    <Card  color={color} fluid >\n                      <Image src={picture} wrapped ui={false} />\n                      <Card.Content>\n                        <Card.Header> {item.title} </Card.Header>\n                        <Card.Meta>\n                          <span className='date'>{item.created_at}   </span>\n                        </Card.Meta>\n                        <Card.Description>\n                          {ReactHtmlParser(item.content)}\n                        </Card.Description>\n                      </Card.Content>\n\n                      <Card.Content extra>\n                        <Grid>\n                          <Grid.Column floated='left' width={5}>\n                            <a onClick={() => this.updatePost(item.id)} >\n                              <Icon onClick={() => this.updatePost(item.id)} name='edit' />Edit </a>\n                          </Grid.Column>\n                          <Grid.Column floated='left' width={5}>\n                            <a onClick={() => this.updatePost(item.id)} >\n                              <Icon onClick={() => this.deletePost(item.id)} name='delete' /> Delete </a>\n                          </Grid.Column>\n                        </Grid>\n                      </Card.Content>\n                    </Card>\n                  </Grid.Column>\n              \n         \n\n            );\n\n\n          })\n        });\n      } else {\n        this.setState({\n          items: []\n        });\n      }\n    });\n  };\n\n  updatePost = id => {\n    axios\n      .put(endpoint + \"/api/v1/task/\" + id, {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      })\n      .then(res => {\n        console.log(res);\n        this.getPOST();\n      });\n  };\n\n  /*\n    statusTask = id => {\n      axios\n        .put(endpoint + \"/api/v1/task/\" + id, {\n          headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n          }\n        })\n        .then(res => {\n          console.log(res);\n          this.getPOST();\n        });\n    };\n  */\n  deletePost = id => {\n    axios\n      .delete(endpoint + \"/api/v1/post/\" + id, {\n        headers: {\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      })\n      .then(res => {\n        console.log(res);\n        this.getPOST();\n      });\n  };\n  render() {\n    // \n    return (<div>\n      <div className=\"row\" >\n        < Header className=\"header\" as=\"h2\" >\n          Post Add\n          </Header>\n      </div>\n\n      <Form onSubmit={this.onSubmit}>\n        <Form.Group widths='equal'>\n          <Form.Input fluid label='Title' placeholder='Title' />\n\n\n        </Form.Group>\n\n        <Form.TextArea label='About' placeholder='Tell us more about you...' />\n        <Form.Button>Submit</Form.Button>\n      </Form>\n\n      <Grid columns={2}>\n        <Grid.Row>\n           {this.state.items} \n        </Grid.Row>\n       </Grid>\n       </div>\n    );\n  }\n}\n\nexport default MainPage;","import React from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\nimport MainPage from \"./MainPage\";\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <MainPage />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}